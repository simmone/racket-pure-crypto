#lang racket

(provide (contract-out
          [*s_box* (listof (listof (or/c exact-nonnegative-integer? symbol?)))]
          [*inv_s_box* (listof (listof (or/c exact-nonnegative-integer? symbol?)))]
          [convert-s-box-to-hash (-> list? void?)]
          [sub-byte (-> (or/c string? byte?)
                        (and/c string? #px"^([0-9]|[a-f]){2}$")
                        )]
          [inv-sub-byte (-> (or/c string? byte?)
                        (and/c string? #px"^([0-9]|[a-f]){2}$")
                        )]
          [sub-word (->
                     (and/c string? #px"^([0-9]|[a-f]){8}$")
                     (and/c string? #px"^([0-9]|[a-f]){8}$"))]
          [inv-sub-word (->
                     (and/c string? #px"^([0-9]|[a-f]){8}$")
                     (and/c string? #px"^([0-9]|[a-f]){8}$"))]
          [sub-block (->
                      (and/c string? #px"^([0-9]|[a-f]){32}$")
                      (and/c string? #px"^([0-9]|[a-f]){32}$"))]
          [inv-sub-block (->
                      (and/c string? #px"^([0-9]|[a-f]){32}$")
                      (and/c string? #px"^([0-9]|[a-f]){32}$"))]
          ))

(define *s_box*
  '(
    (*  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f)
    (0 63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76)
    (1 ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0)
    (2 b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15)
    (3 04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75)
    (4 09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84)
    (5 53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf)
    (6 d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8)
    (7 51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2)
    (8 cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73)
    (9 60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db)
    (a e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79)
    (b e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08)
    (c ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a)
    (d 70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e)
    (e e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df)
    (f 8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16)
    ))

(define *inv_s_box*
  '(
   (*  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f)
   (0 52 09 6a d5 30 36 a5 38 bf 40 a3 9e 81 f3 d7 fb)
   (1 7c e3 39 82 9b 2f ff 87 34 8e 43 44 c4 de e9 cb)
   (2 54 7b 94 32 a6 c2 23 3d ee 4c 95 0b 42 fa c3 4e)
   (3 08 2e a1 66 28 d9 24 b2 76 5b a2 49 6d 8b d1 25)
   (4 72 f8 f6 64 86 68 98 16 d4 a4 5c cc 5d 65 b6 92)
   (5 6c 70 48 50 fd ed b9 da 5e 15 46 57 a7 8d 9d 84)
   (6 90 d8 ab 00 8c bc d3 0a f7 e4 58 05 b8 b3 45 06)
   (7 d0 2c 1e 8f ca 3f 0f 02 c1 af bd 03 01 13 8a 6b)
   (8 3a 91 11 41 4f 67 dc ea 97 f2 cf ce f0 b4 e6 73)
   (9 96 ac 74 22 e7 ad 35 85 e2 f9 37 e8 1c 75 df 6e)
   (a 47 f1 1a 71 1d 29 c5 89 6f b7 62 0e aa 18 be 1b)
   (b fc 56 3e 4b c6 d2 79 20 9a db c0 fe 78 cd 5a f4)
   (c 1f dd a8 33 88 07 c7 31 b1 12 10 59 27 80 ec 5f)
   (d 60 51 7f a9 19 b5 4a 0d 2d e5 7a 9f 93 c9 9c ef)
   (e a0 e0 3b 4d ae 2a f5 b0 c8 eb bb 3c 83 53 99 61)
   (f 17 2b 04 7e ba 77 d6 26 e1 69 14 63 55 21 0c 7d)
   ))

(define *s_box_hash*
  #hash(("00" . "63") ("01" . "7c") ("02" . "77") ("03" . "7b") ("04" . "f2") ("05" . "6b") ("06" . "6f") ("07" . "c5")
        ("08" . "30") ("09" . "01") ("0a" . "67") ("0b" . "2b") ("0c" . "fe") ("0d" . "d7") ("0e" . "ab") ("0f" . "76")
        ("10" . "ca") ("11" . "82") ("12" . "c9") ("13" . "7d") ("14" . "fa") ("15" . "59") ("16" . "47") ("17" . "f0")
        ("18" . "ad") ("19" . "d4") ("1a" . "a2") ("1b" . "af") ("1c" . "9c") ("1d" . "a4") ("1e" . "72") ("1f" . "c0")
        ("20" . "b7") ("21" . "fd") ("22" . "93") ("23" . "26") ("24" . "36") ("25" . "3f") ("26" . "f7") ("27" . "cc")
        ("28" . "34") ("29" . "a5") ("2a" . "e5") ("2b" . "f1") ("2c" . "71") ("2d" . "d8") ("2e" . "31") ("2f" . "15")
        ("30" . "04") ("31" . "c7") ("32" . "23") ("33" . "c3") ("34" . "18") ("35" . "96") ("36" . "05") ("37" . "9a")
        ("38" . "07") ("39" . "12") ("3a" . "80") ("3b" . "e2") ("3c" . "eb") ("3d" . "27") ("3e" . "b2") ("3f" . "75")
        ("40" . "09") ("41" . "83") ("42" . "2c") ("43" . "1a") ("44" . "1b") ("45" . "6e") ("46" . "5a") ("47" . "a0")
        ("48" . "52") ("49" . "3b") ("4a" . "d6") ("4b" . "b3") ("4c" . "29") ("4d" . "e3") ("4e" . "2f") ("4f" . "84")
        ("50" . "53") ("51" . "d1") ("52" . "00") ("53" . "ed") ("54" . "20") ("55" . "fc") ("56" . "b1") ("57" . "5b")
        ("58" . "6a") ("59" . "cb") ("5a" . "be") ("5b" . "39") ("5c" . "4a") ("5d" . "4c") ("5e" . "58") ("5f" . "cf")
        ("60" . "d0") ("61" . "ef") ("62" . "aa") ("63" . "fb") ("64" . "43") ("65" . "4d") ("66" . "33") ("67" . "85")
        ("68" . "45") ("69" . "f9") ("6a" . "02") ("6b" . "7f") ("6c" . "50") ("6d" . "3c") ("6e" . "9f") ("6f" . "a8")
        ("70" . "51") ("71" . "a3") ("72" . "40") ("73" . "8f") ("74" . "92") ("75" . "9d") ("76" . "38") ("77" . "f5")
        ("78" . "bc") ("79" . "b6") ("7a" . "da") ("7b" . "21") ("7c" . "10") ("7d" . "ff") ("7e" . "f3") ("7f" . "d2")
        ("80" . "cd") ("81" . "0c") ("82" . "13") ("83" . "ec") ("84" . "5f") ("85" . "97") ("86" . "44") ("87" . "17")
        ("88" . "c4") ("89" . "a7") ("8a" . "7e") ("8b" . "3d") ("8c" . "64") ("8d" . "5d") ("8e" . "19") ("8f" . "73")
        ("90" . "60") ("91" . "81") ("92" . "4f") ("93" . "dc") ("94" . "22") ("95" . "2a") ("96" . "90") ("97" . "88")
        ("98" . "46") ("99" . "ee") ("9a" . "b8") ("9b" . "14") ("9c" . "de") ("9d" . "5e") ("9e" . "0b") ("9f" . "db")
        ("a0" . "e0") ("a1" . "32") ("a2" . "3a") ("a3" . "0a") ("a4" . "49") ("a5" . "06") ("a6" . "24") ("a7" . "5c")
        ("a8" . "c2") ("a9" . "d3") ("aa" . "ac") ("ab" . "62") ("ac" . "91") ("ad" . "95") ("ae" . "e4") ("af" . "79")
        ("b0" . "e7") ("b1" . "c8") ("b2" . "37") ("b3" . "6d") ("b4" . "8d") ("b5" . "d5") ("b6" . "4e") ("b7" . "a9")
        ("b8" . "6c") ("b9" . "56") ("ba" . "f4") ("bb" . "ea") ("bc" . "65") ("bd" . "7a") ("be" . "ae") ("bf" . "08")
        ("c0" . "ba") ("c1" . "78") ("c2" . "25") ("c3" . "2e") ("c4" . "1c") ("c5" . "a6") ("c6" . "b4") ("c7" . "c6")
        ("c8" . "e8") ("c9" . "dd") ("ca" . "74") ("cb" . "1f") ("cc" . "4b") ("cd" . "bd") ("ce" . "8b") ("cf" . "8a")
        ("d0" . "70") ("d1" . "3e") ("d2" . "b5") ("d3" . "66") ("d4" . "48") ("d5" . "03") ("d6" . "f6") ("d7" . "0e")
        ("d8" . "61") ("d9" . "35") ("da" . "57") ("db" . "b9") ("dc" . "86") ("dd" . "c1") ("de" . "1d") ("df" . "9e")
        ("e0" . "e1") ("e1" . "f8") ("e2" . "98") ("e3" . "11") ("e4" . "69") ("e5" . "d9") ("e6" . "8e") ("e7" . "94")
        ("e8" . "9b") ("e9" . "1e") ("ea" . "87") ("eb" . "e9") ("ec" . "ce") ("ed" . "55") ("ee" . "28") ("ef" . "df")
        ("f0" . "8c") ("f1" . "a1") ("f2" . "89") ("f3" . "0d") ("f4" . "bf") ("f5" . "e6") ("f6" . "42") ("f7" . "68")
        ("f8" . "41") ("f9" . "99") ("fa" . "2d") ("fb" . "0f") ("fc" . "b0") ("fd" . "54") ("fe" . "bb") ("ff" . "16")))

(define *inv_s_box_hash*
  #hash(("00" . "52") ("01" . "09") ("02" . "6a") ("03" . "d5") ("04" . "30") ("05" . "36") ("06" . "a5") ("07" . "38")
        ("08" . "bf") ("09" . "40") ("0a" . "a3") ("0b" . "9e") ("0c" . "81") ("0d" . "f3") ("0e" . "d7") ("0f" . "fb")
        ("10" . "7c") ("11" . "e3") ("12" . "39") ("13" . "82") ("14" . "9b") ("15" . "2f") ("16" . "ff") ("17" . "87")
        ("18" . "34") ("19" . "8e") ("1a" . "43") ("1b" . "44") ("1c" . "c4") ("1d" . "de") ("1e" . "e9") ("1f" . "cb")
        ("20" . "54") ("21" . "7b") ("22" . "94") ("23" . "32") ("24" . "a6") ("25" . "c2") ("26" . "23") ("27" . "3d")
        ("28" . "ee") ("29" . "4c") ("2a" . "95") ("2b" . "0b") ("2c" . "42") ("2d" . "fa") ("2e" . "c3") ("2f" . "4e")
        ("30" . "08") ("31" . "2e") ("32" . "a1") ("33" . "66") ("34" . "28") ("35" . "d9") ("36" . "24") ("37" . "b2")
        ("38" . "76") ("39" . "5b") ("3a" . "a2") ("3b" . "49") ("3c" . "6d") ("3d" . "8b") ("3e" . "d1") ("3f" . "25")
        ("40" . "72") ("41" . "f8") ("42" . "f6") ("43" . "64") ("44" . "86") ("45" . "68") ("46" . "98") ("47" . "16")
        ("48" . "d4") ("49" . "a4") ("4a" . "5c") ("4b" . "cc") ("4c" . "5d") ("4d" . "65") ("4e" . "b6") ("4f" . "92")
        ("50" . "6c") ("51" . "70") ("52" . "48") ("53" . "50") ("54" . "fd") ("55" . "ed") ("56" . "b9") ("57" . "da")
        ("58" . "5e") ("59" . "15") ("5a" . "46") ("5b" . "57") ("5c" . "a7") ("5d" . "8d") ("5e" . "9d") ("5f" . "84")
        ("60" . "90") ("61" . "d8") ("62" . "ab") ("63" . "00") ("64" . "8c") ("65" . "bc") ("66" . "d3") ("67" . "0a")
        ("68" . "f7") ("69" . "e4") ("6a" . "58") ("6b" . "05") ("6c" . "b8") ("6d" . "b3") ("6e" . "45") ("6f" . "06")
        ("70" . "d0") ("71" . "2c") ("72" . "1e") ("73" . "8f") ("74" . "ca") ("75" . "3f") ("76" . "0f") ("77" . "02")
        ("78" . "c1") ("79" . "af") ("7a" . "bd") ("7b" . "03") ("7c" . "01") ("7d" . "13") ("7e" . "8a") ("7f" . "6b")
        ("80" . "3a") ("81" . "91") ("82" . "11") ("83" . "41") ("84" . "4f") ("85" . "67") ("86" . "dc") ("87" . "ea")
        ("88" . "97") ("89" . "f2") ("8a" . "cf") ("8b" . "ce") ("8c" . "f0") ("8d" . "b4") ("8e" . "e6") ("8f" . "73")
        ("90" . "96") ("91" . "ac") ("92" . "74") ("93" . "22") ("94" . "e7") ("95" . "ad") ("96" . "35") ("97" . "85")
        ("98" . "e2") ("99" . "f9") ("9a" . "37") ("9b" . "e8") ("9c" . "1c") ("9d" . "75") ("9e" . "df") ("9f" . "6e")
        ("a0" . "47") ("a1" . "f1") ("a2" . "1a") ("a3" . "71") ("a4" . "1d") ("a5" . "29") ("a6" . "c5") ("a7" . "89")
        ("a8" . "6f") ("a9" . "b7") ("aa" . "62") ("ab" . "0e") ("ac" . "aa") ("ad" . "18") ("ae" . "be") ("af" . "1b")
        ("b0" . "fc") ("b1" . "56") ("b2" . "3e") ("b3" . "4b") ("b4" . "c6") ("b5" . "d2") ("b6" . "79") ("b7" . "20")
        ("b8" . "9a") ("b9" . "db") ("ba" . "c0") ("bb" . "fe") ("bc" . "78") ("bd" . "cd") ("be" . "5a") ("bf" . "f4")
        ("c0" . "1f") ("c1" . "dd") ("c2" . "a8") ("c3" . "33") ("c4" . "88") ("c5" . "07") ("c6" . "c7") ("c7" . "31")
        ("c8" . "b1") ("c9" . "12") ("ca" . "10") ("cb" . "59") ("cc" . "27") ("cd" . "80") ("ce" . "ec") ("cf" . "5f")
        ("d0" . "60") ("d1" . "51") ("d2" . "7f") ("d3" . "a9") ("d4" . "19") ("d5" . "b5") ("d6" . "4a") ("d7" . "0d")
        ("d8" . "2d") ("d9" . "e5") ("da" . "7a") ("db" . "9f") ("dc" . "93") ("dd" . "c9") ("de" . "9c") ("df" . "ef")
        ("e0" . "a0") ("e1" . "e0") ("e2" . "3b") ("e3" . "4d") ("e4" . "ae") ("e5" . "2a") ("e6" . "f5") ("e7" . "b0")
        ("e8" . "c8") ("e9" . "eb") ("ea" . "bb") ("eb" . "3c") ("ec" . "83") ("ed" . "53") ("ee" . "99") ("ef" . "61")
        ("f0" . "17") ("f1" . "2b") ("f2" . "04") ("f3" . "7e") ("f4" . "ba") ("f5" . "77") ("f6" . "d6") ("f7" . "26")
        ("f8" . "e1") ("f9" . "69") ("fa" . "14") ("fb" . "63") ("fc" . "55") ("fd" . "21") ("fe" . "0c") ("ff" . "7d")))

(define (convert-s-box-to-hash s_box)
  (let ([result_hash (make-hash)]
        [y_line (car s_box)])
    (let loop-line ([lines (cdr s_box)])
      (when (not (null? lines))
        (let ([x (~a (caar lines))])
          (let loop-col ([cols (cdar lines)]
                         [col_index 1])
            (when (not (null? cols))
              (hash-set! result_hash
                         (format "\"~a~a\"" x (list-ref y_line col_index))
                         (format "\"~a\"" (~a #:width 2 #:pad-string "0" #:align 'right (car cols))))
              (loop-col (cdr cols) (add1 col_index)))))
        (loop-line (cdr lines))))
    (printf "~a" result_hash)))

(define (sub-byte b)
  (hash-ref
   *s_box_hash*
   (~a #:width 2 #:pad-string "0" #:align 'right
       (if (byte? b) (~r #:base 16 b) b))))

(define (inv-sub-byte b)
  (hash-ref
   *inv_s_box_hash*
   (~a #:width 2 #:pad-string "0" #:align 'right
       (if (byte? b) (~r #:base 16 b) b))))

(define (sub-word w)
  (string-append
   (sub-byte (substring w 0 2))
   (sub-byte (substring w 2 4))
   (sub-byte (substring w 4 6))
   (sub-byte (substring w 6 8))))

(define (inv-sub-word w)
  (string-append
   (inv-sub-byte (substring w 0 2))
   (inv-sub-byte (substring w 2 4))
   (inv-sub-byte (substring w 4 6))
   (inv-sub-byte (substring w 6 8))))

(define (sub-block b)
  (string-append
   (sub-word (substring b 0 8))
   (sub-word (substring b 8 16))
   (sub-word (substring b 16 24))
   (sub-word (substring b 24 32))))

(define (inv-sub-block b)
  (string-append
   (inv-sub-word (substring b 0 8))
   (inv-sub-word (substring b 8 16))
   (inv-sub-word (substring b 16 24))
   (inv-sub-word (substring b 24 32))))


